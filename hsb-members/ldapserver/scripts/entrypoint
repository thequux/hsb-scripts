#!/usr/bin/python3.4

"""
OpenLDAP startup script

Usage:
  entrypoint init --domain=<domain> --rootdn=<dn> --rootpw=<password>
  entrypoint run
  entrypoint dump
  entrypoint restore
  entrypoint (-h | --help)

Options:
  -h --help          Show this screen.
  --version          Show version.
  --domain=<domain>  Domain name for directory root.
  --rootdn=<dn>      Root DN, not subject to access control.
  --rootpw=<pw>      Root DN's password.
"""

import base64
import click
import crypt
import os
import posix
import pytoml
import subprocess
import time
import pwd
from io import StringIO

SLAPD_CONFIG = "/data/cfg/slapd.d"

openldap_pwent = pwd.getpwnam("openldap")

@click.group()
def cli():
    pass

@cli.command()
@click.argument("domain")
@click.argument("organization")
@click.option("--rootdn", help="Root DN, not subject to ACLs")
@click.option("--rootpw", help="Root DN's password. If missing, autogenerate one.")
def init(domain, organization, rootdn, rootpw):
    # NOTE: rootdn MUST start with cn=<something>
    if rootpw is None:
        real_rootpw = base64.b64encode(os.urandom(12), b"_.").decode('utf-8')
    else:
        real_rootpw = rootpw
    cryptedPasswd = crypt_passwd(real_rootpw)

    basedn = ",".join("dc=%s"%dc for dc in domain.split('.'))

    if rootdn is None:
        rootdn = "cn=admin," + basedn

    # Create directories
    for datadir, mode in [("/data/db", 0o700),
                          ("/data/db/" + basedn, 0o755),
                          ("/var/run/slapd", 0o755),
                          (SLAPD_CONFIG, 0o700)]:
        os.makedirs(datadir, mode=mode, exist_ok=True)
        os.chown(datadir, openldap_pwent.pw_uid, openldap_pwent.pw_gid)

    print(">> Writing initial config", file=sys.stderr)
    # Install config
    config_ldif = open("/scripts/slapd.init.ldif", "r").read()
    config_ldif = (config_ldif
                   .replace("@BASEDN@", basedn)
                   .replace("@ROOTDN@", rootdn)
                   .replace("@ROOTPW@", real_rootpw))
    subprocess.Popen("id", shell=True, preexec_fn=become_openldap).wait()
    proc = subprocess.Popen(["/usr/sbin/slapadd",
                             "-F", SLAPD_CONFIG,
                             "-b", "cn=config"],
                            stdin=subprocess.PIPE,
                            preexec_fn=become_openldap)
    proc.stdin.write(config_ldif.encode('utf-8'))
    proc.stdin.close()
    if proc.wait() != 0:
        print("=== ERROR === Failed to load config database; slapadd returned %s" % (proc.returncode),
              file=sys.stderr)

    proc = subprocess.Popen(["/usr/sbin/slapadd",
                             "-F", SLAPD_CONFIG,
                             "-b", basedn],
                            stdin=subprocess.PIPE,
                            preexec_fn=become_openldap)
    parsed_root_dn = parse_dn(rootdn)
    proc.stdin.write(trim_space("""
    dn: %(basedn)s
    objectClass: top
    objectClass: dcObject
    objectClass: organization
    o: %(organization)s
    dc: %(dc)s

    dn: %(rootdn)s
    objectClass: simpleSecurityObject
    objectClass: organizationalRole
    %(rootdn_class)s: %(rootdn_name)s
    description: LDAP Administrator
    userPassword: %(cryptedPasswd)s
    """%dict(basedn=basedn,
             organization=organization,
             dc=domain.split('.')[0],
             rootdn=rootdn,
             rootdn_class=parsed_root_dn[0][0],
             rootdn_name=parsed_root_dn[0][1],
             cryptedPasswd=cryptedPasswd)).encode('utf-8'))
    proc.stdin.close()
    if proc.wait() != 0:
        print("=== ERROR === Failed to add initial entries to database; slapadd returned %s" % (proc.returncode),
              file=sys.stderr)

    print(repr(dict(basedn=basedn,
                    real_rootpw=real_rootpw,
                    rootdn=rootdn)))
    # After initialization
    if basedn is None:
        print("Base DN is: " + basedn)
    if rootpw is None:
        print("Root password is: " + real_rootpw)

    open("/data/cfg/openldap.toml", "w").write(
        pytoml.dumps(dict(baseDN = basedn,
                          rootDN = rootdn,
                          tls = False)))
    print("Done!")

@cli.command()
def run():
    config_msg_printed=False
    while not os.path.isfile("/data/cfg/openldap.toml"):
        if not config_msg_printed:
            config_msg_printed = True
            sys.stdout.write("No configuration found. Perhaps you need to run \"init\"?\n")
            sys.stdout.write("Waiting...")
        else:
            sys.stdout.write(".")
        sys.stdout.flush()
        time.sleep(5)
    slapd_args = [
        "slapd",
        "-F", SLAPD_CONFIG,
        "-u", "openldap",
        "-g", "openldap",
        "-d0",
    ]
    cfg = pytoml.loads(open("/data/cfg/openldap.toml", "r").read())
    if cfg.get("tls", False):
        slapd_args.extend(["-h", "ldap:/// ldaps:/// ldapi:///"])
    else:
        slapd_args.extend(["-h", "ldap:/// ldapi:///"])
    sys.stdout.write("Starting!\n")
    os.execv("/usr/sbin/slapd", slapd_args)

@cli.command()
def dump():
    pass

@cli.command()
def restore():
    pass

def main(argv):
    cli()

# Utilities
def crypt_passwd(passwd):
    return "{CRYPT}" + crypt.crypt(passwd)

def trim_space(string):
    return "\n".join(l.lstrip(' ') for l in string.strip(' \n').splitlines())

def parse_dn(dn):
    return [tuple(c.split('=',2)) for c in dn.split(',')]

def become_openldap():
    os.setgid(openldap_pwent.pw_gid)
    os.setuid(openldap_pwent.pw_uid)

if __name__ == '__main__':
    import sys
    main(sys.argv)
